TODO

• Timeline:                                                                     (19 h)
   ◦ DONE: Faire un `PositionComponent` au lieu de l’héritage à `sf::Transformable`
      → DONE: Solution alternative: Ajouter le `sf::Transformable` en composant   (20 min)
   ◦ DONE: Intégrer le code de Dylan pour la GUI                                (2 h)
   ◦ TODO: Faire le système de gestion dynamique des entités + PPT              (3 h)
   ◦ TODO: Rajouter des types d’ennemis, de bullets, un boss, ...               (4 h)
   ◦ TODO: Finir d’améliorer l’architecure réseau                               (2 h)
   ◦ TODO: Faire le système de lobby et le rajouter sur le PPT                  (8 h)
   ◦ TODO: Améliorer l’architecture des systèmes                                (2 h)
      → TODO: Rajouter DrawingSystem dans la Scene au lieu de l’appeller direct

*NE PAS OUBLIER DE FAKE LES HEADERS!!!!!!!!!!!!!!!!*

• WIP: Amélioration d’architecture
   ◦ DONE: Transformer /engine en lib pour éviter de recompiler 2 fois tous les fichiers
   ◦ DONE: Le réseau n’a rien à faire dans le `MovementSystem`, le déplacer vers un autre système
   ◦ DONE: Mettre le jeu dans une bibliothèque séparée (càd les Factory/Movement/Behaviour)
   ◦ DONE: Virer `Application` et créer une classe statique `Config` avec les dimensions de l’écran
   ◦ DONE: Renommer /graphics/characters en /graphics/spaceship et /graphics/bullets en /graphics/bullet
   ◦ DONE: Virer la dépendance à la partie multimédia de la SFML pour le serveur
      → `Problèmes:` `DrawingSystem` est dans `SceneSystem` et `sf::Transformable` est défini dans la partie graphique de la sfml
         → Solutions: Créer des vraies classes pour les systèmes et un conteneur de systèmes dans `Scene` qui remplacerait `SceneSystem`
                      Créer un `PositionComponent` qui remplacerait l’utilisation de `sf::Transformable` (qui serait utilisée par `Image` à la place)
      → Mettre les parties affichage/audio dans des bibliothèques séparées utilisées uniquement dans le client
      → Déplacer la dépendance à la SFML vers les CMakeLists.txt du client et du serveur
   ◦ TODO: Améliorer le code réseau du client et du serveur
      ◦ TODO: Créer une classe `Client` qui remplacerait `NetworkCommandHandler`
      ◦ TODO: Faire en sorte que `Network` n’ait pas de code spécifique ni au client, ni au serveur
   ◦ TODO: Vérifier que tous les fichiers de l’engine soient bien à leur place
   ◦ TODO: Remplacer la SFML2 par BoostASIO pour la partie réseau
   ◦ TODO: /LOW/ Créer des loaders pour les fonts et les musiques
   ◦ TODO: /LOW/ Remplacer tinyxml2 par Qt et virer le dossier /cmake
• WIP: Network issues
   ◦ DONE: Enemy bullets disappear when enemy is killed
      → Potential solution: Add subentities to Scene if the entity dies
      → Alternative solution: Wait subentities are dead before killing main entity
   ◦ DONE: Bullets appear on the top-left corner before being shooted, why?
   ◦ DONE: During network lag spikes, entities are not correctly deleted/spawned
      → Use TCP to send spawn/die events
   ◦ DONE: Find a way to fix error message at server close “Can’t find client with id”
   ◦ TODO: Put a timeout on connect and a “Connecting...” message
   ◦ TODO: Can’t join the server again if I leave (maybe close sockets when I’m out of GameState)
   ◦ TODO: *MANDATORY:* Alive entities are not sent to new clients
   ◦ TODO: Find a way to fix exception “Listen failed”
• TODO: Other issues
   ◦ TODO: /LOW/ Faster bullets when spamming shoot button instead of holding it, wtf?
• TODO: Documentation
   ◦ TODO: *MANDATORY:* Binary protocol (RFC, ascii format, printed)
   ◦ TODO: *MANDATORY:* UML class + sequence diagram (printed)
   ◦ TODO: *MANDATORY:* Doxygen (optional)
• WIP: Game
   ◦ WIP: Network
      ◦ WIP: Server
         ▸ DONE: Handle up to 4 players
         ▸ TODO: Handle multiple games at the same time (lobby system)
         ▸ TODO: Handle client crash (timeout)
            ▹ TODO: Implement `ClientAlive` TCP command
   ◦ WIP: Player spaceship implementation (blue, red, yellow, green)
      ◦ DONE: Add the ability to shoot
      ◦ DONE: Add network-based movement
      ◦ DONE: Handle collisions with screen borders
      ◦ DONE: Handle collisions with enemy bullets
      ◦ TODO: Handle movement animation
      ◦ TODO: Die animation
   ◦ WIP: Enemy implementation
      ◦ DONE: Add movement
      ◦ DONE: Add the ability to shoot
      ◦ DONE: Send notification to each client when a mob spawns, is killed, shoots, kills a player...
      ◦ DONE: Handle random spawn on the right of the screen
      ◦ DONE: Handle collisions with ally bullets
      ◦ TODO: Add a dynamic library loader for enemy factories/movement/behaviours
      ◦ TODO: Add a menu to add libs in runtime
      ◦ TODO: Handle movement animation
      ◦ TODO: Die animation
   ◦ DONE: Background
      ◦ DONE: Slow horizontal scrolling background
      ◦ DONE: Stop or loop when the scrolling ends
   ◦ WIP: GUI → Dylan
      ◦ DONE: Button class
      ◦ DONE: Title screen
      ◦ DONE: Pause menu
      ◦ DONE: Victory/Game over screen
      ◦ DONE: Text Box class
      ◦ DONE: Assets improvements
      ◦ TODO: Lobby screen
   ◦ WIP: Check if game compiles and works on Windows
      ◦ DONE: Try to cross-compile and run with Wine
      ◦ TODO: Try to run cross-compilated executable on Windows
      ◦ TODO: Try to compile on Windows
• WIP: Review
   ◦ WIP: Mettre en avant les features de l’engine
      → DONE: Framerate independent
      → DONE: Fichiers XML qui permettent de modifier le jeu sans avoir à recompiler
      → DONE: Engine modulaire (3 parties, le cœur, la partie graphique et le jeu en lui-même)
      → DONE: Système d’entités à composants
      → DONE: Chaque texture n’est chargée qu’une fois en mémoire
      → TODO: Gestion dynamique des monstres (chaque client peut rajouter/enlever des monstres sur sa game)
   ◦ WIP: Mettre en avant les features réseau
      → DONE: Utilisation de TCP pour la connexion et de UDP pour le jeu en lui-même
      → TODO: Système de lobby
      → TODO: Tchat + commandes serveur (ça serait ouf)

